library(RcppGSL)
src <- '
// [[Rcpp::depends(RcppGSL)]]
#include <RcppGSL.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
// [[Rcpp::export]]
Rcpp::NumericVector colNorm(Rcpp::NumericMatrix sM) {
RcppGSL::matrix<double> M(sM);     // create gsl data structures from SEXP
int k = M.ncol();
Rcpp::NumericVector n(k); 		// to store results
for (int j = 0; j < k; j++) {
RcppGSL::vector_view<double> colview = gsl_matrix_column (M, j);
n[j] = gsl_blas_dnrm2(colview);
}
M.free() ;                          // important: GSL wrappers use C structure
return n;				// return vector
}'
sourceCpp(code = src, showOutput=T)
library(Rcpp)
src <- '
// [[Rcpp::depends(RcppGSL)]]
#include <RcppGSL.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
// [[Rcpp::export]]
Rcpp::NumericVector colNorm(Rcpp::NumericMatrix sM) {
RcppGSL::matrix<double> M(sM);     // create gsl data structures from SEXP
int k = M.ncol();
Rcpp::NumericVector n(k); 		// to store results
for (int j = 0; j < k; j++) {
RcppGSL::vector_view<double> colview = gsl_matrix_column (M, j);
n[j] = gsl_blas_dnrm2(colview);
}
M.free() ;                          // important: GSL wrappers use C structure
return n;				// return vector
}'
sourceCpp(code = src, showOutput=T)
library(Rcpp)
library(RcppGSL)
library(RcppGSL)
library(Rcpp)
getwd()
setwd("//tsclient/Resear1/Store switching/Exercise/Basket DP/Dynamic allocation simulation")
getwd()
source("DAM_2_functions.R")
sourceCpp("DAM_2_functions.cpp")
library(Rcpp)
evalCpp("1 + 1", showOutput= TRUE)
