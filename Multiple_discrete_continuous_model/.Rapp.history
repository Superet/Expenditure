omega.ls[[3]](10)
omega.ls[[2]](10)
ggtmp	<- lapply(1:R, function(i) omega.ls[[i]](tmp))#
ggtmp	<- data.frame(x = rep(tmp, R), omega = unlist(ggtmp), k = rep(1:R, each = length(tmp)))#
ggplot(ggtmp, aes(x, omega, col = factor(k))) + geom_line()
ggplot(ggtmp, aes(x, omega, col = factor(k))) + geom_line()
min(ggtmp$omega)
eps_draw<- cbind(matrix(rgumbel(N*R), N, R), 0)
head(eps_draw)
eps_draw<- matrix(rgumbel(N*(R+1)), N, R+1)
head(eps_draw)
rep(1, N) %*% c(beta, 0)
rep(1, N) %*% t(c(beta, 0))
psi		<- exp(rep(1, N) %*% t(c(beta, 0)) + eps_draw)
# Set simulation parameters#
R 	<- 3#
N	<- 200#
beta	<- c(-2, -1.5, -.8)
# Set simulation parameters#
R 	<- 3#
N	<- 200#
beta	<- c(-2, -1.5, -.8)#
#
# Omega is a list, each element is the first order derivative of expected utilty w.r.t. y#
omega.ls	<- vector("list", length = R)#
omega.ls[[1]]	<- function(x, par = FALSE){ #
	par <- c(.5, -2, 10); #
	if(par){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[2]]	<- function(x, par = FALSE){ #
	par <- c(.7, -1, 5); #
	if(par){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[3]]	<- function(x, par = FALSE){ #
	par <- c(.3, -3, 8); #
	if(par){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
tmp	<- seq(min(Inc), max(Inc), length = 100)#
ggtmp	<- lapply(1:R, function(i) omega.ls[[i]](tmp))#
ggtmp	<- data.frame(x = rep(tmp, R), omega = unlist(ggtmp), k = rep(1:R, each = length(tmp)))#
ggplot(ggtmp, aes(x, omega, col = factor(k))) + geom_line()
# Omega is a list, each element is the first order derivative of expected utilty w.r.t. y#
omega.ls	<- vector("list", length = R)#
omega.ls[[1]]	<- function(x, par.ret = FALSE){ #
	par <- c(.5, -2, 10); #
	if(par){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[2]]	<- function(x, par.ret = FALSE){ #
	par <- c(.7, -1, 5); #
	if(par){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[3]]	<- function(x, par.ret = FALSE){ #
	par <- c(.3, -3, 8); #
	if(par){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
tmp	<- seq(min(Inc), max(Inc), length = 100)#
ggtmp	<- lapply(1:R, function(i) omega.ls[[i]](tmp))#
ggtmp	<- data.frame(x = rep(tmp, R), omega = unlist(ggtmp), k = rep(1:R, each = length(tmp)))#
ggplot(ggtmp, aes(x, omega, col = factor(k))) + geom_line()
# Omega is a list, each element is the first order derivative of expected utilty w.r.t. y#
omega.ls	<- vector("list", length = R)#
omega.ls[[1]]	<- function(x, par.ret = FALSE){ #
	par <- c(.5, -2, 10); #
	if(par.ret){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[2]]	<- function(x, par.ret = FALSE){ #
	par <- c(.7, -1, 5); #
	if(par.ret){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[3]]	<- function(x, par.ret = FALSE){ #
	par <- c(.3, -3, 8); #
	if(par.ret){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
tmp	<- seq(min(Inc), max(Inc), length = 100)#
ggtmp	<- lapply(1:R, function(i) omega.ls[[i]](tmp))#
ggtmp	<- data.frame(x = rep(tmp, R), omega = unlist(ggtmp), k = rep(1:R, each = length(tmp)))#
ggplot(ggtmp, aes(x, omega, col = factor(k))) + geom_line()
i
par <- omega.ls[[i]](0, TRUE)
par
rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}
rev.omega[[1]](1/100)
rev.omega[[1]]	<- function(mu){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi[,1]))/par[1])#
	}
head(psi)
beta	<- c(-6, -8, -5)
# Simulate income#
Inc <- rexp(N, .05)#
summary(Inc)#
eps_draw<- matrix(rgumbel(N*(R+1)), N, R+1)#
psi		<- exp(rep(1, N) %*% t(c(beta, 0)) + eps_draw)
rev.omega[[1]](100)
rev.omega[[1]](1000)
rev.omega[[1]](2)
rev.omega[[1]](1000)
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	rev.omega <- vector("list", length = length(omega.ls))#
	for(i in 1:R){#
		rev.omega[[i]]	<- function(mu){#
			par <- omega.ls[[1]](0, TRUE)#
			return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi[,i]))/par[1])#
		}#
	}
a <- rev.omega[[1]](50)
a
b <- rev.omega[[2]](50)
head(cbind(a, b))
rev.omega <- vector("list", length = length(omega.ls))#
	for(i in 1:R){#
		rev.omega[[i]]	<- function(mu){#
			par <- omega.ls[[i]](0, TRUE)#
			return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi[,i]))/par[1])#
		}#
	}
a <- rev.omega[[1]](50)
b <- rev.omega[[2]](50)
head(a)
head(b)
i
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi[,1]))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi[,2]))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi[,3]))/par[1])#
	}
a <- rev.omega[[1]](50)
b <- rev.omega[[2]](50)
head(a)
head(b)
sapply(rev.omega, function(x) x(50))
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu, psi){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}
psi <- c(1, 3, 5)
ystar	<- sapply(1:R, function(i) rev.omega[[i]](60, psi[i]))
ystar
# Set simulation parameters#
R 	<- 3#
N	<- 200#
beta	<- c(-6, -8, -5)#
#
# Omega is a list, each element is the first order derivative of expected utilty w.r.t. y#
omega.ls	<- vector("list", length = R)#
omega.ls[[1]]	<- function(x, par.ret = FALSE){ #
	par <- c(.1, -2, 10); #
	if(par.ret){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[2]]	<- function(x, par.ret = FALSE){ #
	par <- c(.2, -1, 5); #
	if(par.ret){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
omega.ls[[3]]	<- function(x, par.ret = FALSE){ #
	par <- c(.3, -3, 8); #
	if(par.ret){#
		return(par)#
	}else{#
		return(par[1]*x^2 + par[2]*x + par[3])#
	}#
}#
tmp	<- seq(min(Inc), max(Inc), length = 100)#
ggtmp	<- lapply(1:R, function(i) omega.ls[[i]](tmp))#
ggtmp	<- data.frame(x = rep(tmp, R), omega = unlist(ggtmp), k = rep(1:R, each = length(tmp)))#
ggplot(ggtmp, aes(x, omega, col = factor(k))) + geom_line()
exp(-6)
psi <- c(.5, .6, .1)
Inc <- 100
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu, psi){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}
bu 	<- lapply(1:R, function(i) psi[,i]*omega.ls[[i]](0) )#
	idx	<- order(bu, deacreasing = T)#
	sorted.bu	<- bu[idx]
bu 	<- lapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )
bu
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )
bu
idx	<- order(bu, deacreasing = T)
idx	<- order(bu, decreasing = T)
sorted.bu	<- bu[idx]
sorted.bu
pind	<- 1 * (bu >= 1/Inc)
pind
f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}
f(10)
f(100)
solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, lower = 1/Inc)#
		return(mu.star)#
	}
mu		<- solve_mu(pind, psi, Inc)
solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, interval = c(1/Inc, 99999))#
		return(mu.star)#
	}
mu		<- solve_mu(pind, psi, Inc)
f(1/Inc)
# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, interval = c(1/min(bu), 99999))#
		return(mu.star)#
	}
f(min(b))
f(min(bu))
min(bu)
min(1/bu)
1/min(bu)
f(1/min(bu))
par.mat	<- sapply(omega.ls, function(x) x(0, TRUE))
par.mat
min.mu	<- psi* (-par.mat[2,]^2/4 + par.mat[1,]*par.mat[3,])
min.mu
f(.5)
f(1)
sapply(1:R, function(i) rev.omega[[i]](1, psi[i]))
psi
par <- c(.2, -1, 5);
par[2]^2 - 4*par[1]*(par[3] - 1/psi[2])
par[2]^2 - 4*par[1]*(par[3] - 2/psi[2])
par[2]^2 - 4*par[1]*(par[3] - 3/psi[2])
# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		min.mu	<- max(psi* (par.mat[3,] - .25*par[2,]^2/par[1,]))#
		mu.star	<- uniroot(f, interval = c(min.mu, 99999))#
		return(mu.star)#
	}
f(3)
mu		<- solve_mu(pind, psi, Inc)
# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
		mu.star	<- uniroot(f, interval = c(min.mu, 99999))#
		return(mu.star)#
	}
mu		<- solve_mu(pind, psi, Inc)
mu
bu
idx
idx	<- order(bu)
idx
idx	<- order(bu, decreasing = T)
idx
idx[M]
M <- 3
mu		<- solve_mu(pind, psi, Inc)$root
sorted.bu[M] < mu
pind[idx[M]]	<- 0
pind
M	<- M - 1
mu		<- solve_mu(pind, psi, Inc)$root
mu
sorted.bu[M] < mu
sorted.bu
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	par.mat	<- sapply(omega.ls, function(x) x(0, TRUE))#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu, psi){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, interval = c(min.mu, 99999))#
		return(mu.star)#
	}#
	bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while(sorted.bu[M] < mu){#
		pind[idx[M]]	<- 0#
		M	<- M - 1#
		mu		<- solve_mu(pind, psi, Inc)$root#
	}#
	ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))
mu
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	par.mat	<- sapply(omega.ls, function(x) x(0, TRUE))#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu, psi){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, interval = c(min.mu, max.mu))#
		return(mu.star)#
	}#
	bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- min(psi* (par[1,]*Inc^2 + par[2,]*Inc^2 + par[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 100, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while(sorted.bu[M] < mu){#
		pind[idx[M]]	<- 0#
		M	<- M - 1#
		mu		<- solve_mu(pind, psi, Inc)$root#
	}#
	ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))
max.mu	<- min(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))
max.mu
max.mu	<- psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,])
max.mu
max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 100, max.mu)
max.mu
max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 100, max.mu)
max.mu
min.mu
mu		<- solve_mu(pind, psi, Inc)$root
f(2)
f(2.25)
f(10)
f(200)
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while(sorted.bu[M] < mu){#
		pind[idx[M]]	<- 0#
		M	<- M - 1#
		mu		<- solve_mu(pind, psi, Inc)$root#
	}#
	ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))
pind
M
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while(sorted.bu[M] < mu | M == 0){#
		pind[idx[M]]	<- 0#
		M	<- M - 1#
		mu		<- solve_mu(pind, psi, Inc)$root#
	}
mu
M
pind
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	par.mat	<- sapply(omega.ls, function(x) x(0, TRUE))#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu, psi){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] + .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, interval = c(min.mu, max.mu))#
		return(mu.star)#
	}#
	bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while(sorted.bu[M] < mu){#
		pind[idx[M]]	<- 0#
		M	<- M - 1#
		if(M > 0){#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}else{#
			mu		<- 1/Inc#
		}#
	}#
	ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))
Inc
M
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root
M
sorted.bu[M] < mu | M == 0
pind[idx[M]]	<- 0#
		M	<- M - 1#
		if(M > 0){#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}else{#
			mu		<- 1/Inc#
		}
mu
sorted.bu[M] < mu | M == 0
pind[idx[M]]	<- 0#
		M	<- M - 1#
		if(M > 0){#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}else{#
			mu		<- 1/Inc#
		}
M
sorted.bu[M] < mu | M == 0
pind
pind[idx[M]]	<- 0#
		M	<- M - 1#
		if(M > 0){#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}else{#
			mu		<- 1/Inc#
		}
M
sorted.bu[M] < mu | M == 0
M
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root
while( M > 0){#
		while(sorted.bu[M] < mu ){#
			pind[idx[M]]	<- 0#
			M	<- M - 1#
			if(M > 0){#
				mu		<- solve_mu(pind, psi, Inc)$root#
			}else{#
				mu		<- 1/Inc#
			}#
		}	#
	}
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while( M > 0){#
		print(M)#
		while(sorted.bu[M] < mu ){#
			pind[idx[M]]	<- 0#
			M	<- M - 1#
			if(M > 0){#
				mu		<- solve_mu(pind, psi, Inc)$root#
			}else{#
				mu		<- 1/Inc#
			}#
		}	#
	}
M
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root
M
sorted.bu[M] < mu
pind[idx[M]]
b
bu
idx
pind[idx[M]]	<- 0
pind
M	<- M - 1
M
mu		<- solve_mu(pind, psi, Inc)$root
sorted.bu[M] < mu
pind[idx[M]]	<- 0
idx[M]
pind
M
M	<- M - 1
M
mu		<- solve_mu(pind, psi, Inc)$root
sorted.bu[M] < mu
pind[idx[M]]	<- 0#
			M	<- M - 1#
			if(M > 0){#
				mu		<- solve_mu(pind, psi, Inc)$root#
			}else{#
				mu		<- 1/Inc#
			}
M
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while( M > 0){#
		print(M)#
		while(sorted.bu[M] < mu ){#
			pind[idx[M]]	<- 0#
			M	<- M - 1#
			if(M > 0){#
				mu		<- solve_mu(pind, psi, Inc)$root#
			}else{#
				mu		<- 1/Inc#
			}#
		}	#
	}
M
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root
while( M > 0 & sorted.bu[M] < mu ){#
		pind[idx[M]]	<- 0#
		M	<- M - 1#
		if(M > 0){#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}else{#
			mu		<- 1/Inc#
		}	#
	}
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while( M > 0 & sorted.bu[M] < mu ){#
		print(M)#
		pind[idx[M]]	<- 0#
		mu		<- solve_mu(pind, psi, Inc)$root#
		M	<- M - 1#
	}
mu
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while( M > 0 & sorted.bu[M] < mu ){#
		print(M)#
		pind[idx[M]]	<- 0#
		mu		<- solve_mu(pind, psi, Inc)$root#
		M	<- M - 1#
		print(mu)#
	}
pind
bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while( M > 0 & sorted.bu[M] < mu ){#
		print(M)#
		pind[idx[M]]	<- 0#
		M		<- M - 1#
		if(M==0){#
			mu		<- 1/Inc#
		}else{#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}#
		print(mu)#
	}
# Reverse omega function: psi_i*omega.ls[i](x) = mu#
	par.mat	<- sapply(omega.ls, function(x) x(0, TRUE))#
	rev.omega <- vector("list", length = length(omega.ls))#
	rev.omega[[1]]	<- function(mu, psi){#
		par <- omega.ls[[1]](0, TRUE)#
		return(-.5*par[2]/par[1] - .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[2]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] - .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	rev.omega[[3]]	<- function(mu, psi){#
		par <- omega.ls[[2]](0, TRUE)#
		return(-.5*par[2]/par[1] - .5*sqrt(par[2]^2 - 4*par[1]*(par[3] - mu/psi))/par[1])#
	}#
	# Function that solves for mu: #
	# sum_c y_c^*(mu) + y0(mu) = Inc#
	solve_mu <- function( pind, psi, Inc){#
		f <- function(mu){#
			ystar	<- sapply(1:R, function(i) rev.omega[[i]](mu, psi[i]))#
			out	<- sum(ystar * pind) + 1/mu - Inc#
			return(out)#
		}#
		mu.star	<- uniroot(f, interval = c(min.mu, max.mu))#
		return(mu.star)#
	}#
	bu 	<- sapply(1:R, function(i) psi[i]*omega.ls[[i]](0) )#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	pind	<- 1 * (bu >= 1/Inc)#
	M 		<- sum(pind > 0)#
	min.mu	<- max(psi* (par.mat[3,] - .25*par.mat[2,]^2/par.mat[1,]))#
	max.mu	<- max(psi* (par.mat[1,]*Inc^2 + par.mat[2,]*Inc^2 + par.mat[3,]))#
	max.mu 	<- ifelse(max.mu <= min.mu, min.mu + 5000, max.mu)#
	mu		<- solve_mu(pind, psi, Inc)$root#
	while( M > 0 & sorted.bu[M] < mu ){#
		print(M)#
		pind[idx[M]]	<- 0#
		M		<- M - 1#
		if(M==0){#
			mu		<- 1/Inc#
		}else{#
			mu		<- solve_mu(pind, psi, Inc)$root#
		}#
		print(mu)#
	}
f(min.mu)
f(200)
min.mu
f(1)
f(3)
rev.omega[[i]](2, psi[1])
rev.omega[[i]](200, psi[1])
sample(c("c","n"),1)
# MDCEV simulation #
#
library(reshape2)#
library(ggplot2)#
library(Rcpp)#
library(RcppArmadillo)#
library(maxLik)#
library(evd)#
library(nloptr)#
#
setwd("~/Documents/Research/Store switching/Exercise/Multiple_discrete_continuous_model")#
source("0_Allocation_function.R")#
#
# Set paraemters #
R		<- 3 		# Number of alternatives#
Ra		<- R		# Number of alternatives + number of outside options#
exp_outside <- quant_outside <- FALSE#
beta0 	<- c(0, -1, -1)#
beta	<- c(.5, -.7)#
gamma0 	<- gamma	<- c(1, 1, 1)#
sigma 	<- 1#
qz_cons	<- Inf#
#
# Simulate data #
set.seed(666666)#
nx 		<- length(beta)#
N 		<- 500		# Number of observations#
X_arr 	<- array(rnorm(N*R*nx), c(R, N, nx))#
X_list  <- lapply(1:R, function(i) X_arr[i,,])#
price 	<- matrix(runif(N*R, 2, 4), N, R)#
Q		<- runif(N, 1, 20)#
y		<- rowSums(price) * Q/R #
#
eps_draw<- matrix(rgumbel(N*R), N, R)#
xbeta	<- do.call(cbind, lapply(1:R, function(i) X_list[[i]] %*% beta + beta0[i]))#
psi		<- exp(xbeta + eps_draw)
# Use optimization for solve optimal allocation#
e_mat <- matrix(NA, N, Ra)#
omega	<- rep(NA, N)#
pct		<- proc.time()#
for(i in 1:N){#
	tmp	<- Allocation_fn(y = y[i], psi = psi[i,], gamma, Q = Q[i], price = price[i,], R, Ra, qz_cons, exp_outside, quant_outside)#
	e_mat[i,] 	<- tmp$e#
	omega[i] 	<- tmp$max#
}#
use.time1	<- proc.time() - pct
# Use efficient algorithm for solution#
allc_fn <- function(y, psi, gamma, price, R){#
	bu	<- psi/price#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	mu	<- 0#
	M 	<- 0#
	e	<- rep(0, R)#
	mu.track	<- NULL#
	while(mu/y < sorted.bu[(M+1)] & M < R){#
		M	<- M + 1#
		sel	<- idx[1:M]#
		mu	<- sum(gamma[sel]*psi[sel]) / (1 + sum(gamma[sel]*price[sel]/y))#
		mu.track	<- c(mu.track, mu)#
	}#
	sel 	<- idx[1:M]#
	e[sel] 	<- gamma[sel]*(psi[sel]*y/mu - price[sel])#
	return(list (e = e, mu = mu, mu.track =mu.track))#
}#
#
all_vec_fn	<- function(y, psi, gamma, price, R){#
	N 	<- length(y)#
	bu	<- psi/price#
	idx	<- t(apply(bu, 1, order, decreasing = T))#
	sorted.bu	<- t(apply(bu, 1, sort, decreasing = T))#
	mu	<- rep(0, N)#
	M	<- rep(0, N)#
	for(r in 1:R){#
		sel		<- mu/y < sapply(1:N, function(i) sorted.bu[i,(M[i]+1)])#
		if(sum(sel) > 0){#
			M[sel]	<- M[sel] + 1#
			pe.ind	<- t(sapply(1:N, function(i) 1*(1:R %in% idx[i,(1:M[i])])))#
			mu[sel]	<- rowSums(gamma[sel,]*psi[sel,]*pe.ind[sel,]) / (1 + rowSums(gamma[sel,]*price[sel,]*pe.ind[sel,])/y[sel])#
		}#
	}#
	e	<- gamma*(psi*y/mu - price)*pe.ind#
	return(e)#
}#
#
e_mat1 <- matrix(NA, N, R)#
omega1	<- rep(NA, N)#
mu		<- rep(NA, N)#
pct		<- proc.time()#
for(i in 1:N){#
	tmp			<- allc_fn(y = y[i], psi = psi[i,], gamma, price = price[i,], R)#
	e_mat1[i,] 	<- tmp$e#
	mu[i]		<- tmp$mu#
	omega1[i]	<- uP_fn(e=e_mat1[i,], psi = psi[i,], gamma, price=price[i,], R, Ra, qz_cons, exp_outside, quant_outside)#
}#
use.time2 <- proc.time() - pct#
#
summary(omega - omega1)#
#
pct	<- proc.time()#
e_mat2	<- all_vec_fn(y, psi, rep(1, N) %*% t(gamma), price, R)#
use.time3 <- proc.time() - pct#
max(abs(e_mat1 - e_mat2))#
#
# Compare timing #
c(use.time1[3], use.time2[3], use.time3[3])
#################################
# Add a new choice alternative ##
#################################
beta0.new	<- beta0[c(1:R,1)]#
gamma.new	<- gamma[c(1:R,1)]#
X.list.new	<- vector("list", length = R+1)#
X.list.new	<- X_list[c(1:R, 1)]#
eps_draw_new<- cbind(eps_draw, rgumbel(N))#
xbeta.new	<- do.call(cbind, lapply(1:(R+1), function(i) X.list.new[[i]] %*% beta + beta0.new[i]))#
psi.new		<- exp(xbeta.new + eps_draw_new)#
price.new	<- price[,c(1:R,1)]#
#
e_mat1.new 	<- matrix(NA, N, R+1)#
omega1.new	<- rep(NA, N)#
mu.new		<- rep(NA, N)#
pct		<- proc.time()#
for(i in 1:N){#
	tmp				<- allc_fn(y = y[i], psi = psi.new[i,], gamma.new, price = price.new[i,], R+1)#
	e_mat1.new[i,] 	<- tmp$e#
	mu.new[i]		<- tmp$mu#
	omega1.new[i]	<- uP_fn(e=e_mat1.new[i,], psi = psi.new[i,], gamma.new, price=price.new[i,], R+1, Ra+1, qz_cons, exp_outside, quant_outside)#
}#
use.time2 <- proc.time() - pct#
#
summary(mu.new - mu)#
summary(e_mat1)#
summary(e_mat1.new)#
#
cat("Average share before:\n"); print(colMeans(e_mat1/y))#
cat("Average share after:\n"); print(colMeans(e_mat1.new/y))
############################################################
# Sensitivity analysis of the correlation in random terms # #
############################################################
xi		<- rgumbel(N)#
ggtmp	<- data.frame()#
rho.vec	<- seq(-1, 1, .1)
i <- 5
rho.vec[i]
eps_draw.new<- cbind(eps_draw, rho.vec[i]*eps_draw[,1]+sqrt(1-rho.vec[i]^2)*xi)
cor(eps_draw.new)
N
cov(eps_draw.new)
psi.new		<- exp(xbeta.new + esp_draw.new)#
	tmp			<- all_vec_fn(y, psi.new, rep(1, N) %*% t(gamma.new), price.new, R+1)
psi.new		<- exp(xbeta.new + eps_draw.new)
tmp			<- all_vec_fn(y, psi.new, rep(1, N) %*% t(gamma.new), price.new, R+1)
str(tmp)
head(tmp)
colMeans(tmp/y)
ggtmp		<- rbind(ggtmp, c(rho = rho.vec[i], tmp))
ggtmp
c(rho = rho.vec[i], colMeans(tmp/y))
############################################################
# Sensitivity analysis of the correlation in random terms # #
############################################################
xi		<- rgumbel(N)#
ggtmp	<- data.frame()#
rho.vec	<- seq(-1, 1, .1)#
#
for(i in 1:length(rho.vec)){#
	eps_draw.new<- cbind(eps_draw, rho.vec[i]*eps_draw[,1]+sqrt(1-rho.vec[i]^2)*xi)#
	psi.new		<- exp(xbeta.new + eps_draw.new)#
	tmp			<- all_vec_fn(y, psi.new, rep(1, N) %*% t(gamma.new), price.new, R+1)#
	ggtmp		<- rbind(ggtmp, c(rho = rho.vec[i], colMeans(tmp/y)))#
}
head(ggtmp)
names(ggtmp)
letters[1:4]
names(ggtmp)	<- c("rho", "a", "b", "c", "new.a")
ggplot(ggtmp, aes(rho, a)) + geom_line()
ggtmp1			<- melt(ggtmp, id.vars = "rho")
head(ggtmp1)
ggplot(ggtmp, aes(rho, a + new.a)) + geom_line()
cat("Average share before:\n"); print(colMeans(e_mat1/y))#
cat("Average share after:\n"); print(colMeans(e_mat1.new/y))
ggplot(ggtmp1, aes(rho, value)) + geom_line() + facet_grid(. ~ variable)
tmp				<- c(rho = NA, colMeans(e_mat1/y), 0)
tmp
tmp				<- setNames(c(rho = NA, colMeans(e_mat1/y), 0), c("rho", "a", "b", "c", "new.a") )
tmp
ggtmp			<- rbind(ggtmp, tmp)
ggtmp1			<- melt(ggtmp, id.vars = "rho")
head(ggtmp1)
dim(ggtmp1)
ggplot(ggtmp1, aes(rho, value)) + geom_line() + #
		geom_hline(data = subset(ggtmp1,is.na(rho)), aes(yintercept = value)) + #
		facet_grid(. ~ variable)
ggplot(ggtmp1, aes(rho, value)) + geom_line() + #
		geom_hline(data = subset(ggtmp1,is.na(rho)), aes(yintercept = value), col = "red", linetype = 2) + #
		facet_grid(. ~ variable)
ggplot(ggtmp, aes(rho, a + new.a)) + geom_line()
# Set paraemters #
R		<- 3 		# Number of alternatives#
Ra		<- R		# Number of alternatives + number of outside options#
exp_outside <- quant_outside <- FALSE#
beta0 	<- c(0, -1, -1)#
beta	<- c(.5, -.7)#
gamma0 	<- gamma	<- c(1, 1, 1)#
sigma 	<- 1#
qz_cons	<- Inf#
#
# Simulate data #
set.seed(666666)#
nx 		<- length(beta)#
N 		<- 1000		# Number of observations#
X_arr 	<- array(rnorm(N*R*nx), c(R, N, nx))#
X_list  <- lapply(1:R, function(i) X_arr[i,,])#
price 	<- matrix(runif(N*R, 2, 4), N, R)#
Q		<- runif(N, 1, 20)#
y		<- rowSums(price) * Q/R
eps_draw<- matrix(rgumbel(N*R), N, R)#
xbeta	<- do.call(cbind, lapply(1:R, function(i) X_list[[i]] %*% beta + beta0[i]))#
psi		<- exp(xbeta + eps_draw)#
#
# par(mfrow=c(3,1))#
# hist(y, breaks=100)#
# hist(Q, breaks=100)#
# hist(as.vector(price), breaks=100)#
#
# Use optimization for solve optimal allocation#
e_mat <- matrix(NA, N, Ra)#
omega	<- rep(NA, N)#
pct		<- proc.time()#
for(i in 1:N){#
	tmp	<- Allocation_fn(y = y[i], psi = psi[i,], gamma, Q = Q[i], price = price[i,], R, Ra, qz_cons, exp_outside, quant_outside)#
	e_mat[i,] 	<- tmp$e#
	omega[i] 	<- tmp$max#
}#
use.time1	<- proc.time() - pct#
#
# Use efficient algorithm for solution#
allc_fn <- function(y, psi, gamma, price, R){#
	bu	<- psi/price#
	idx	<- order(bu, decreasing = T)#
	sorted.bu	<- bu[idx]#
	mu	<- 0#
	M 	<- 0#
	e	<- rep(0, R)#
	mu.track	<- NULL#
	while(mu/y < sorted.bu[(M+1)] & M < R){#
		M	<- M + 1#
		sel	<- idx[1:M]#
		mu	<- sum(gamma[sel]*psi[sel]) / (1 + sum(gamma[sel]*price[sel]/y))#
		mu.track	<- c(mu.track, mu)#
	}#
	sel 	<- idx[1:M]#
	e[sel] 	<- gamma[sel]*(psi[sel]*y/mu - price[sel])#
	return(list (e = e, mu = mu, mu.track =mu.track))#
}#
#
all_vec_fn	<- function(y, psi, gamma, price, R){#
	N 	<- length(y)#
	bu	<- psi/price#
	idx	<- t(apply(bu, 1, order, decreasing = T))#
	sorted.bu	<- t(apply(bu, 1, sort, decreasing = T))#
	mu	<- rep(0, N)#
	M	<- rep(0, N)#
	for(r in 1:R){#
		sel		<- mu/y < sapply(1:N, function(i) sorted.bu[i,(M[i]+1)])#
		if(sum(sel) > 0){#
			M[sel]	<- M[sel] + 1#
			pe.ind	<- t(sapply(1:N, function(i) 1*(1:R %in% idx[i,(1:M[i])])))#
			mu[sel]	<- rowSums(gamma[sel,]*psi[sel,]*pe.ind[sel,]) / (1 + rowSums(gamma[sel,]*price[sel,]*pe.ind[sel,])/y[sel])#
		}#
	}#
	e	<- gamma*(psi*y/mu - price)*pe.ind#
	return(e)#
}#
#
e_mat1 <- matrix(NA, N, R)#
omega1	<- rep(NA, N)#
mu		<- rep(NA, N)#
pct		<- proc.time()#
for(i in 1:N){#
	tmp			<- allc_fn(y = y[i], psi = psi[i,], gamma, price = price[i,], R)#
	e_mat1[i,] 	<- tmp$e#
	mu[i]		<- tmp$mu#
	omega1[i]	<- uP_fn(e=e_mat1[i,], psi = psi[i,], gamma, price=price[i,], R, Ra, qz_cons, exp_outside, quant_outside)#
}#
use.time2 <- proc.time() - pct#
#
summary(omega - omega1)#
#
pct	<- proc.time()#
e_mat2	<- all_vec_fn(y, psi, rep(1, N) %*% t(gamma), price, R)#
use.time3 <- proc.time() - pct#
max(abs(e_mat1 - e_mat2))#
#
# Compare timing #
c(use.time1[3], use.time2[3], use.time3[3])#
#
#################################
# Add a new choice alternative ##
#################################
beta0.new	<- beta0[c(1:R,1)]#
gamma.new	<- gamma[c(1:R,1)]#
X.list.new	<- vector("list", length = R+1)#
X.list.new	<- X_list[c(1:R, 1)]#
eps_draw_new<- cbind(eps_draw, rgumbel(N))#
xbeta.new	<- do.call(cbind, lapply(1:(R+1), function(i) X.list.new[[i]] %*% beta + beta0.new[i]))#
psi.new		<- exp(xbeta.new + eps_draw_new)#
price.new	<- price[,c(1:R,1)]#
#
e_mat1.new 	<- matrix(NA, N, R+1)#
omega1.new	<- rep(NA, N)#
mu.new		<- rep(NA, N)#
pct		<- proc.time()#
for(i in 1:N){#
	tmp				<- allc_fn(y = y[i], psi = psi.new[i,], gamma.new, price = price.new[i,], R+1)#
	e_mat1.new[i,] 	<- tmp$e#
	mu.new[i]		<- tmp$mu#
	omega1.new[i]	<- uP_fn(e=e_mat1.new[i,], psi = psi.new[i,], gamma.new, price=price.new[i,], R+1, Ra+1, qz_cons, exp_outside, quant_outside)#
}#
use.time2 <- proc.time() - pct#
#
summary(mu.new - mu)#
summary(e_mat1)#
summary(e_mat1.new)#
#
cat("Average share before:\n"); print(colMeans(e_mat1/y))#
cat("Average share after:\n"); print(colMeans(e_mat1.new/y))
############################################################
# Sensitivity analysis of the correlation in random terms # #
############################################################
xi		<- rgumbel(N)#
ggtmp	<- data.frame()#
rho.vec	<- seq(-1, 1, .1)#
#
for(i in 1:length(rho.vec)){#
	eps_draw.new<- cbind(eps_draw, rho.vec[i]*eps_draw[,1]+sqrt(1-rho.vec[i]^2)*xi)#
	psi.new		<- exp(xbeta.new + eps_draw.new)#
	tmp			<- all_vec_fn(y, psi.new, rep(1, N) %*% t(gamma.new), price.new, R+1)#
	ggtmp		<- rbind(ggtmp, c(rho = rho.vec[i], colMeans(tmp/y)))#
}#
names(ggtmp)	<- c("rho", "a", "b", "c", "new.a")#
tmp				<- setNames(c(rho = NA, colMeans(e_mat1/y), 0), c("rho", "a", "b", "c", "new.a") )#
ggtmp			<- rbind(ggtmp, tmp)#
ggtmp1			<- melt(ggtmp, id.vars = "rho")#
#
ggplot(ggtmp, aes(rho, a + new.a)) + geom_line()
ggplot(ggtmp1, aes(rho, value)) + geom_line() + #
		geom_hline(data = subset(ggtmp1,is.na(rho)), aes(yintercept = value), col = "red", linetype = 2) + #
		facet_grid(. ~ variable)
quartz()
ggplot(ggtmp, aes(rho, a + new.a)) + geom_line()
